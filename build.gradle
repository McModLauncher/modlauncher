buildscript {
    repositories {
        mavenCentral()
        // The following is only necessary if you want to use SNAPSHOT releases.
        // maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    }
    dependencies {
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.0-M4'
    }
}


apply plugin: 'org.junit.platform.gradle.plugin'
apply plugin: 'maven'
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'jacoco'

repositories {
    mavenCentral()
}

sourceSets {
    testJars
}

jacoco {
    toolVersion = "0.7.6.201602180812"
}

group = 'cpw.mods'
//noinspection GroovyUnusedAssignment
archivesBaseName = 'modlauncher'
version = '0.1-SNAPSHOT'
//noinspection GroovyUnusedAssignment
sourceCompatibility = 1.8


dependencies {
    compile group: 'com.google.code.findbugs', name: 'jsr305', version: '1.3.9'
    compile 'net.sf.jopt-simple:jopt-simple:4.5'
    compile 'org.ow2.asm:asm-debug-all:5.2'
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.8.1'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.8.1'
    testCompile "org.junit.jupiter:junit-jupiter-api:5.0.0-M4"
    testCompile(group: 'org.powermock', name: 'powermock-core', version: '1.6.6')
    testRuntime "org.junit.jupiter:junit-jupiter-engine:5.0.0-M4"
    testRuntime sourceSets.testJars.runtimeClasspath
}

task testsJar(type: Jar) {
    classifier = 'testsjar'
    from sourceSets.testJars.output
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives testsJar
    archives jar
    archives sourcesJar
}

def repoDir = new File(projectDir, "repo")
repoDir.mkdirs()

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: "file://" + repoDir.absolutePath)

            pom.project {
                description 'Minecraft Mod Launcher'
                url 'http://github.com/cpw/modlauncher'
            }
        }
    }

    doLast {
        // Purge all annoying files that arent needed
        repoDir.traverse(type: FileType.FILES, nameFilter: ~/.*\.(xml(?:\.sha1)?|md5)$/) {
            it.delete()
        }
    }
}

clean.doLast {
    repoDir.deleteDir()
}
