plugins {
    id 'java-library'
    id 'eclipse'
    id 'com.github.ben-manes.versions' version '0.48.0'
    id 'net.neoforged.gradleutils' version '3.0.0-alpha.4'
    id 'org.gradlex.extra-java-module-info' version '1.4.2'
    id 'maven-publish'
}

java {
    toolchain.languageVersion = JavaLanguageVersion.of(17)
    withSourcesJar()
}

def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
}

dependencyUpdates {
    rejectVersionIf {
        isNonStable(it.candidate.version)
    }
}

group = 'cpw.mods'
version = gradleutils.version
logger.lifecycle('Version: {}', version)

sourceSets {
    jmh
    testJars
}

repositories {
    mavenLocal()
    maven {
        name = 'forge'
        url = 'https://maven.neoforged.net/releases'
    }
}


dependencies {
    api("org.ow2.asm:asm:${asm_version}")
    api("org.ow2.asm:asm-tree:${asm_version}")
    api("org.ow2.asm:asm-commons:${asm_version}")
    
    implementation("cpw.mods:securejarhandler:${sjh_version}")
    implementation("org.apache.logging.log4j:log4j-api:${log4j_version}")
    implementation("org.apache.logging.log4j:log4j-core:${log4j_version}")
    implementation("net.sf.jopt-simple:jopt-simple:${jopt_version}")
    compileOnly("org.jetbrains:annotations:${jetbrains_ann_version}")
    
    annotationProcessor("org.apache.logging.log4j:log4j-core:${log4j_version}")
    
    testCompileOnly(sourceSets.testJars.output)
    testCompileOnly("org.jetbrains:annotations:${jetbrains_ann_version}")
    testImplementation("org.junit.jupiter:junit-jupiter-api:${junit_version}")
    testImplementation("org.junit.jupiter:junit-jupiter-engine:${junit_version}")
    testImplementation("org.powermock:powermock-core:${powermock_version}")
    testImplementation("org.powermock:powermock-reflect:${powermock_version}")
    testRuntimeOnly("org.apiguardian:apiguardian-api:${apiguardian_version}")

    jmhImplementation(sourceSets.main.output)
    jmhImplementation(sourceSets.testJars.output)
    jmhImplementation("org.openjdk.jmh:jmh-core:${jmh_version}")
    jmhImplementation("org.powermock:powermock-core:${powermock_version}")
    jmhAnnotationProcessor("org.openjdk.jmh:jmh-generator-annprocess:${jmh_version}")
}

configurations.jmhImplementation.extendsFrom(configurations.implementation)

extraJavaModuleInfo {
    failOnMissingModuleInfo = false
    
    automaticModule("jmh-core-${jmh_version}.jar", 'jmh.core')
    automaticModule("powermock-core-${powermock_version}.jar", 'powermock.core')
    automaticModule("powermock-reflect-${powermock_version}.jar", 'powermock.reflect')
    automaticModule("jopt-simple-${jopt_version}.jar", 'jopt.simple')
}

tasks.register('testsJar', Jar) {
    archiveClassifier = 'testsjar'
    from sourceSets.testJars.output
}

test {
    dependsOn 'testsJar'
    
    useJUnitPlatform()
    
    systemProperty 'testJars.location', testsJar.archiveFile.get().asFile
    
    jvmArgs(
            '--module-path', classpath.asPath,
            '--add-modules', 'ALL-MODULE-PATH',
            '--add-opens', 'cpw.mods.modlauncher/cpw.mods.modlauncher=powermock.reflect',
            '--add-opens', 'java.base/java.lang=powermock.reflect',
            '--add-opens', 'cpw.mods.securejarhandler/cpw.mods.cl=powermock.reflect',
            '--add-opens', 'java.base/java.lang.invoke=cpw.mods.securejarhandler',
            '--add-reads', 'cpw.mods.modlauncher=cpw.mods.modlauncher.test'
    )
}

tasks.register('jmh', JavaExec) {
    dependsOn('jmhClasses')
    mainClass = 'org.openjdk.jmh.Main'

    final results = file("${project.reportsDir}/jmh/result.json")
    doFirst {
        results.parentFile.mkdirs()

        jvmArgs(
                '--module-path', sourceSets.jmh.runtimeClasspath.asPath,
                '--add-modules', 'ALL-MODULE-PATH',
                '--add-opens', 'cpw.mods.modlauncher/cpw.mods.modlauncher=powermock.reflect',
                '--add-opens', 'cpw.mods.modlauncher/cpw.mods.modlauncher=cpw.mods.modlauncher.benchmarks',
                '--add-exports', 'cpw.mods.modlauncher.benchmarks/cpw.mods.modlauncher.benchmarks.jmh_generated=jmh.core'
        )
    }

    args = [
            'cpw.mods.modlauncher.benchmarks.TransformBenchmark',
            '-bm', 'avgt',
            '-prof', 'stack',
            '-prof', 'jfr',
            '-r', '3s',
            '-w', '3s',
            '-wi', '3',
            '-i', '3',
            '-f', '3',
            '-tu', 'us',
            '-rf', 'json',
            '-rff', results
    ]
    if (project.hasProperty('jmhVendor') && project.hasProperty('jmhVersion')) {
        final specifiedVendor = project.property('jmhVendor').toString()
        final actualVendor = specifiedVendor.endsWith('-J9') ? specifiedVendor.substring(0, specifiedVendor.length() - 3) : specifiedVendor
        javaLauncher.set(javaToolchains.launcherFor {
            it.vendor.set(JvmVendorSpec."${actualVendor.toUpperCase(Locale.ROOT)}" as JvmVendorSpec)
            it.languageVersion.set(JavaLanguageVersion.of(project.property('jmhVersion') as int))
            it.implementation.set(specifiedVendor.endsWith('-J9') ? JvmImplementation.J9 : JvmImplementation.VENDOR_SPECIFIC)
        })
    } else {
        javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
    }
}

ext.sharedManifest = manifest {
    attributes(['Specification-Title': 'modlauncher',
                'Specification-Vendor': 'mcmodlauncher',
                'Specification-Version': '9.0', // We are version 9 of the modlauncher specification
                'Implementation-Title': project.name,
                'Implementation-Version': "${project.version}+${gradleutils.gitInfo.branch}.${gradleutils.gitInfo.abbreviatedId}",
                'Implementation-Vendor' :'mcmodlauncher',
                'Git-Commit': gradleutils.gitInfo.abbreviatedId,
                'Git-Branch': gradleutils.gitInfo.branch?:'NONE'],
            'cpw/mods/modlauncher/api/')
    attributes(['Specification-Title': 'modlauncherserviceapi',
                'Specification-Vendor': 'mcmodlauncher',
                'Specification-Version': '9.0', // We are version 9 of the modlauncher cpw.mods.modlauncher.serviceapi specification
                "Implementation-Title": project.name,
                'Implementation-Version': "${project.version}+${gradleutils.gitInfo.branch}.${gradleutils.gitInfo.abbreviatedId}",
                'Implementation-Vendor' :'mcmodlauncher',
                'Git-Commit': gradleutils.gitInfo.abbreviatedId,
                'Git-Branch': gradleutils.gitInfo.branch?:'NONE'],
            'cpw/mods/modlauncher/serviceapi/')
}

jar {
    manifest.from(sharedManifest)
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-Xlint:unchecked'
}

compileJava {
    options.javaModuleVersion = project.version.toString()
    options.javaModuleMainClass = 'cpw.mods.modlauncher.Launcher'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            pom {
                name = 'Mod Launcher'
                description = 'Common ModLauncher framework'
                pomUtils.githubRepo(it, 'modlauncher', 'McModLauncher')

                developers {
                    developer {
                        id = 'cpw'
                        name = 'cpw'
                    }
                }
            }
        }
    }
    repositories {
        maven gradleutils.publishingMaven
    }
}
