plugins {
    id 'org.ajoberstar.reckon' version '0.9.0'
    id 'org.ajoberstar.grgit' version '3.0.0'
    id "com.github.ben-manes.versions" version '0.20.0'
}
apply plugin: 'java-library'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'eclipse'
apply plugin: 'jacoco'

repositories {
    mavenCentral()
}

sourceSets {
    api
    testJars
}

reckon {
    scopeFromProp()
    stageFromProp('milestone', 'rc', 'final')
}

reckonTagCreate.dependsOn check

dependencyUpdates.resolutionStrategy {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm', 'preview'].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
            }
            if (rejected) {
                selection.reject('Release candidate')
            }
        }
    }
}

test {
    useJUnitPlatform()
}

jacoco {
    toolVersion = "0.8.2"
}

group = 'cpw.mods'

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    implementation("com.google.code.findbugs:jsr305:3.0.2")
    implementation("net.sf.jopt-simple:jopt-simple:5.0.4")
    api("org.ow2.asm:asm:6.2")
    api("org.ow2.asm:asm-tree:6.2")
    api("org.ow2.asm:asm-commons:6.2")
    apiImplementation("org.ow2.asm:asm:6.2")
    apiImplementation("org.ow2.asm:asm-tree:6.2")
    apiImplementation("org.ow2.asm:asm-commons:6.2")
    implementation("org.apache.logging.log4j:log4j-api:2.11.+")
    implementation("org.apache.logging.log4j:log4j-core:2.11.+")
    implementation(sourceSets.api.output)
    testImplementation("org.junit.jupiter:junit-jupiter-api:5.3.+")
    testImplementation("org.powermock:powermock-core:2.0.+")
    testImplementation("org.junit.jupiter:junit-jupiter-engine:5.3.+")
    testImplementation(sourceSets.testJars.runtimeClasspath)
}

task apiJar(type: Jar) {
    archiveClassifier = 'api'
    from sourceSets.api.output
}

task apiSourcesJar(type: Jar) {
    archiveClassifier = 'apisource'
    from sourceSets.api.allSource
}

task testsJar(type: Jar) {
    archiveClassifier = 'testsjar'
    from sourceSets.testJars.output
}

task sourcesJar(type: Jar) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
    from sourceSets.api.allSource
}


ext.sharedManifest = manifest {
    attributes(["Specification-Title": "modlauncher",
                "Specification-Vendor": "Forge",
                "Specification-Version": "1.0", // We are version 1 of the modlauncher specification
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}+${System.getenv("BUILD_NUMBER")?:0}+${grgit.head().abbreviatedId}",
                "Implementation-Vendor" :"Forge",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "Git-Commit": grgit.head().abbreviatedId,
                "Git-Branch": grgit.branch.current().getName() ],
            "cpw/mods/modlauncher/api/")
    attributes(["Specification-Title": "modlauncherserviceapi",
                "Specification-Vendor": "Forge",
                "Specification-Version": "1.0", // We are version 1 of the modlauncher serviceapi specification
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}+${System.getenv("BUILD_NUMBER")?:0}+${grgit.head().abbreviatedId}",
                "Implementation-Vendor" :"Forge",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "Git-Commit": grgit.head().abbreviatedId,
                "Git-Branch": grgit.branch.current().getName() ],
            "cpw/mods/modlauncher/serviceapi/")
}

jar {
    from sourceSets.api.output
    manifest = project.manifest {
        from sharedManifest
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs << '-Xlint:unchecked'
}

artifacts {
    archives apiJar
    archives apiSourcesJar
    archives testsJar
    archives jar
    archives sourcesJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact apiJar
            artifact apiSourcesJar
            artifact sourcesJar
            pom {
                name = 'Mod Launcher'
                description = 'Common ModLauncher framework'
                url = 'https://github.com/cpw/modlauncher'
                scm {
                    url = 'https://github.com/cpw/modlauncher'
                    connection = 'scm:git:git://github.com/cpw/modlauncher.git'
                    developerConnection = 'scm:git:git@github.com:cpw/modlauncher.git'
                }
                issueManagement {
                    system = 'github'
                    url = 'https://github.com/cpw/modlauncher/issues'
                }

                developers {
                    developer {
                        id = 'cpw'
                        name = 'cpw'
                    }
                }
            }
        }
    }
    repositories {
        maven {
            credentials {
                username project.properties.forgeMavenUser?:'fake'
                password project.properties.forgeMavenPassword?:'news'
            }
            url "http://files.minecraftforge.net/maven/manage/upload"
        }
    }
}